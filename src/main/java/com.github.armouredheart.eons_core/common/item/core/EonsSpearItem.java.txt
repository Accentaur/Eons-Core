// package
package com.github.armouredheart.eons_core.common.item.core;

// Minecraft imports
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.ai.attributes.AttributeModifier;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.inventory.EquipmentSlotType;
import net.minecraft.world.World;
import net.minecraft.item.UseAction;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.item.TieredItem;
import net.minecraft.item.IItemTier;
import net.minecraft.item.ItemTier;
import net.minecraft.potion.EffectInstance;
import net.minecraft.potion.Potion;
import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.util.math.BlockPos;
import net.minecraft.network.datasync.DataParameter;
import net.minecraft.network.datasync.DataSerializers;
import net.minecraft.network.datasync.EntityDataManager;

// Forge imports

// Eons imports
import com.github.armouredheart.eons_core.common.entity.projectile.EonsSpearEntity;

// misc imports
import com.google.common.collect.Multimap;
import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
import java.util.Set;
import com.google.common.collect.Sets;

/** Based on Trident and Sword classes */
public class EonsSpearItem extends TieredItem {

    // *** Attributes ***
    private static final DataParameter<Integer> COLOR = EntityDataManager.createKey(EonsSpearItem.class, DataSerializers.VARINT);
    private final Set<EffectInstance> customPotionEffects = Sets.newHashSet();
    private final EonsSpearEntity spearEntity;
    private final float attackDamage;
    private final float attackSpeedBase;
    private Potion potion = Potions.EMPTY;

    // *** Constructors ***

    /** */
    public EonsSpearItem(IItemTier tier, EonsSpearEntity spearEntity, int attackDamageBase, float attackSpeedBase, Item.Properties builder) {
        super(tier, builder);
        this.attackSpeedBase = attackSpeedBase;
        this.attackDamage = (float)attackDamageBase + tier.getAttackDamage();
        this.spearEntity = spearEntity;
    }

    // *** Methods ***

    /** */
    @Override
    public boolean canPlayerBreakBlockWhileHolding(BlockState state, World worldIn, BlockPos pos, PlayerEntity player) {
        return !player.isCreative();
    }

    /**
    * Called when a Block is destroyed using this Item. Return true to trigger the "Use Item" statistic.
    */
    public boolean onBlockDestroyed(ItemStack stack, World worldIn, BlockState state, BlockPos pos, LivingEntity entityLiving) {
        if (state.getBlockHardness(worldIn, pos) != 0.0F) {
            stack.damageItem(2, entityLiving, (temp) -> {
            temp.sendBreakAnimation(EquipmentSlotType.MAINHAND);
            });
        }
        return true;
    }

    /**
    * Gets a map of item attribute modifiers, used by ItemSword to increase hit damage.
    */
    public Multimap<String, AttributeModifier> getAttributeModifiers(EquipmentSlotType equipmentSlot) {
        Multimap<String, AttributeModifier> multimap = super.getAttributeModifiers(equipmentSlot);
        if (equipmentSlot == EquipmentSlotType.MAINHAND) {
            multimap.put(SharedMonsterAttributes.ATTACK_DAMAGE.getName(), new AttributeModifier(ATTACK_DAMAGE_MODIFIER, "Weapon modifier", (double)this.attackDamage, AttributeModifier.Operation.ADDITION));
            multimap.put(SharedMonsterAttributes.ATTACK_SPEED.getName(), new AttributeModifier(ATTACK_SPEED_MODIFIER, "Weapon modifier", (double)this.attackSpeed, AttributeModifier.Operation.ADDITION));
        }

        return multimap;
    }

}